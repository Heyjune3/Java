package com.bitc.test;

/**
 * 문서 주석(별 2개)
 * 이 클래스는 기본 타입의 변수 사용법을 알아봅니다.
 * @since 2023-11-02
 */

public class VariableTest {
/*
  	프로그램 동작의 시작과 끝은
  	main method에서 이루어진다.
 */
	public static void main(String[] args) {
		// TODO 변수 다시 확인!!
		// 선언부
//		int num;
//		num = "이준호"; // int형 정수만 사용 가능
		// 프린트 L N
		// 초기화 전에는 해당 변수를 사용할 수 없다.
		// 컴파일 오류
//		System.out.println(num);
		// 0B 바이너리 - 뒤에 오는 값은 이진수
		byte bNum = 0B00001010;
		System.out.println("bNum : " + bNum);
		// 앞에 0이 붙으면 8진수 임을 의미한다.
		byte oNum = 012;
		// (8^1 * 1) + (8^0 *2) = 10;
		System.out.println("oNum : " + oNum);
		
		// 앞에 0X가 붙으면 16진수임을 의미
		// 0 ~ 9 A B C D E F
		byte xNum = 0X3A;
		// (16^1 * 3) + A == 10 = 58;
		System.out.println("xNum : " + xNum);
		
		byte b1 = -128;
		b1 = 127;
//		저장 범위를 벗어나는 데이터가 대입되면 컴파일 오류
//		b1 = -129; 
		
		// ' ' == 한개의 문자
		// " " == 문자열
		
		// 한개의 문자를 담는 char(캐릭터)
		char c = '가';
		
		// c = 'AB'; 한개의 문자만 가능
		// c = "A"; 
		c = 65; // 유니코드 65 = A, 97 = a
		c = 65535;
		// 음수를 표현하지 않음 0 ~ 65535 양의 정수로 문자 표현
		// c = -1; 
		System.out.println("c :" + c);
		
		// 2byte의 정수값을 저장 하는 short
		short s = -30000;
		System.out.println("s :" + s);
		
		int i = 2100000000; // 2^31 까지 저장됨 약 21억
		// 4byte
		// [ 1 ][ 1 ][ 1 ][ 1 ]
		// 모든 상수 변수는 int 4byte를 거쳤다가
		// 컴파일러가 걸러줘서 저장됨
		
		// 대입이 안되는 게 아니라 리터럴로 저장을 못함
		// 4byte에 담을 수가 없어서
		// 고로 long은 끝에 L을 넣어 8byte라고 알려줘야 함
		long l = 10000000000L; // 100억
		
		char c1 = 'A';
		System.out.println(c1 + 1);
		// 컴파일러가 ex> char c1 = 65535 + 1 일수도 있어서 검증하지 못함
		// char c2 = C1 + 1; // 정수를 산술연산하면 무조건 int
		
		// 컴파일러한테 캐릭터타입이라고 알려줌
		char c2 = (char)(c1 + 1);
		System.out.println(c2);
		System.out.println(10/3);
		
		// 8byte의 실수를 저장하는 타입 - 정밀.
		double d = 3.141582;
		
		// 4byte의 실수를 저장
		// long과 같이 float은 뒤에 f
		float f = 3.141592f;
		// 정수만 있으면 int
		// 연산에서 실수가 하나라도 포함되어 있으면 double 타입으로 도출
		double result = 3.141592 * 10 * 10;
		System.out.println(result);
		System.out.println(10.0 / 3);
		
		boolean isTrue = true;
		// 지수표기법 : e+'0의 갯수'
		isTrue = (3e+5 == 300000);
		System.out.println(isTrue);
		isTrue (3e-5 == 0.00003);
	}

}














